{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createClass from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _slicedToArray from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [index]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    var decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1);\n  // Optional path segments are denoted by a trailing `?`\n  var isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  })));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    var route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var stringify = function stringify(p) {\n    return p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  };\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    var keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n        key = _keyMatch[1],\n        optional = _keyMatch[2];\n      var param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    compiledParams = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = compiledParams.reduce(function (memo, _ref, index) {\n    var paramName = _ref.paramName,\n      isOptional = _ref.isOptional;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    var value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var params = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, function (_, paramName, isOptional) {\n    params.push({\n      paramName: paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(function (v) {\n      return decodeURIComponent(v).replace(/\\//g, \"%2F\");\n    }).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref6 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref6.pathname,\n    _ref6$search = _ref6.search,\n    search = _ref6$search === void 0 ? \"\" : _ref6$search,\n    _ref6$hash = _ref6.hash,\n    hash = _ref6$hash === void 0 ? \"\" : _ref6$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  var pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map(function (match, idx) {\n      return idx === matches.length - 1 ? match.pathname : match.pathnameBase;\n    });\n  }\n  return pathMatches.map(function (match) {\n    return match.pathnameBase;\n  });\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref7 = _slicedToArray(_ref2, 2),\n        key = _ref7[0],\n        value = _ref7[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key);\n      // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, undefined, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      });\n      // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      // If the promise was resolved/rejected with undefined, we'll throw an error as you\n      // should always resolve with a value or null\n      if (error === undefined && data === undefined) {\n        var undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return undefinedError;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(undefinedError);\n      }\n      if (data === undefined) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref3) {\n        var _ref8 = _slicedToArray(_ref3, 2),\n          key = _ref8[0],\n          value = _ref8[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirectDocument = function redirectDocument(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nvar ErrorResponseImpl = /*#__PURE__*/_createClass(function ErrorResponseImpl(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponseImpl);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n};\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  var manifest = {};\n  // Routes in tree format for matching\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\";\n  var dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  var future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  var unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  var subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  var savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  var getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  var getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  var initialized;\n  var hasLazyRoutes = initialMatches.some(function (m) {\n    return m.route.lazy;\n  });\n  var hasLoaders = initialMatches.some(function (m) {\n    return m.route.loader;\n  });\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    var loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    var errors = init.hydrationData ? init.hydrationData.errors : null;\n    var isRouteInitialized = function isRouteInitialized(m) {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      var idx = initialMatches.findIndex(function (m) {\n        return errors[m.route.id] !== undefined;\n      });\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  var pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  var pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  var pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  var pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  var appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  var removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  var isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  var isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  var cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  var cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  var fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  var incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  var pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  var fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  var fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  var fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  var activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  var deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  var activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  var blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  var ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            var blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers: blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      var _saveAppliedTransitions = function _saveAppliedTransitions() {\n        return persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      };\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = function removePageHideEventListener() {\n        return routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n      };\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    var completedFetchers = [];\n    var deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach(function (fetcher, key) {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    _toConsumableArray(subscribers).forEach(function (subscriber) {\n      return subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true\n      });\n    });\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(function (key) {\n        return state.fetchers.delete(key);\n      });\n      deletedFetchersKeys.forEach(function (key) {\n        return deleteFetcher(key);\n      });\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    var _ref9 = _temp === void 0 ? {} : _temp,\n      flushSync = _ref9.flushSync;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach(function (_, k) {\n        return blockers.set(k, IDLE_BLOCKER);\n      });\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    var viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      var priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      var toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: blockers\n    }), {\n      viewTransitionOpts: viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, flushSync, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n            _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            flushSync = (opts && opts.unstable_flushSync) === true;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 17;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                });\n                // Send the same navigation through\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                var blockers = new Map(state.blockers);\n                blockers.set(blockerKey, IDLE_BLOCKER);\n                updateState({\n                  blockers: blockers\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 17:\n            _context2.next = 19;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace,\n              enableViewTransition: opts && opts.unstable_viewTransition,\n              flushSync: flushSync\n            });\n          case 19:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, flushSync, _error, _getShortCircuitMatch2, notFoundMatches, _route, request, pendingActionResult, actionResult, _yield$handleLoaders, shortCircuited, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n            // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(routesToUse, location, basename);\n            flushSync = (opts && opts.flushSync) === true; // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 17;\n              break;\n            }\n            _error = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse), notFoundMatches = _getShortCircuitMatch2.matches, _route = _getShortCircuitMatch2.route; // Cancel all pending deferred on 404s since we don't keep any routes\n            cancelActiveDeferreds();\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            }, {\n              flushSync: flushSync\n            });\n            return _context3.abrupt(\"return\");\n          case 17:\n            if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n              _context3.next = 20;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            }, {\n              flushSync: flushSync\n            });\n            return _context3.abrupt(\"return\");\n          case 20:\n            // Create a controller/Request for this navigation\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 26;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingActionResult = [findNearestBoundary(matches).route.id, {\n              type: ResultType.error,\n              error: opts.pendingError\n            }];\n            _context3.next = 36;\n            break;\n          case 26:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 36;\n              break;\n            }\n            _context3.next = 29;\n            return handleAction(request, location, opts.submission, matches, {\n              replace: opts.replace,\n              flushSync: flushSync\n            });\n          case 29:\n            actionResult = _context3.sent;\n            if (!actionResult.shortCircuited) {\n              _context3.next = 32;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 32:\n            pendingActionResult = actionResult.pendingActionResult;\n            loadingNavigation = getLoadingNavigation(location, opts.submission);\n            flushSync = false;\n            // Create a GET request for the loaders\n            request = createClientSideRequest(init.history, request.url, request.signal);\n          case 36:\n            _context3.next = 38;\n            return handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n          case 38:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 44;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 44:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: matches\n            }, getActionDataForCommit(pendingActionResult), {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 46:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, opts) {\n      var navigation, result, actionMatch, results, replace, _location, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (opts === void 0) {\n              opts = {};\n            }\n            interruptActiveLoads();\n            // Put us in a submitting state\n            navigation = getSubmittingNavigation(location, submission);\n            updateState({\n              navigation: navigation\n            }, {\n              flushSync: opts.flushSync === true\n            });\n            // Call our action and get the result\n            actionMatch = getTargetMatch(matches, location);\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context4.next = 9;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 15;\n            break;\n          case 9:\n            _context4.next = 11;\n            return callDataStrategy(\"action\", request, [actionMatch], matches);\n          case 11:\n            results = _context4.sent;\n            result = results[0];\n            if (!request.signal.aborted) {\n              _context4.next = 15;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 15:\n            if (!isRedirectResult(result)) {\n              _context4.next = 20;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              _location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n              replace = _location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 19;\n            return startRedirectNavigation(request, result, {\n              submission: submission,\n              replace: replace\n            });\n          case 19:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 20:\n            if (!isDeferredResult(result)) {\n              _context4.next = 22;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 22:\n            if (!isErrorResult(result)) {\n              _context4.next = 26;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n            // action threw an error that'll be rendered in an errorElement, we fall\n            // back to PUSH so that the user can use the back button to get back to\n            // the pre-submission form location to try again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              pendingActionResult: [boundaryMatch.route.id, result]\n            });\n          case 26:\n            return _context4.abrupt(\"return\", {\n              pendingActionResult: [actionMatch.route.id, result]\n            });\n          case 27:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x12, _x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21) {\n    return _handleLoaders.apply(this, arguments);\n  } // Trigger a fetcher load/submit for the given fetcher key\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n      var loadingNavigation, activeSubmission, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            });\n            pendingNavigationLoadId = ++incrementingLoadId;\n            // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 10;\n              break;\n            }\n            _updatedFetchers = markFetchRedirectsDone();\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null\n            }, getActionDataForCommit(pendingActionResult), _updatedFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}), {\n              flushSync: flushSync\n            });\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 10:\n            // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n            // If we have partialHydration enabled, then don't update the state for the\n            // initial data load since it's not a \"navigation\"\n            if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n              revalidatingFetchers.forEach(function (rf) {\n                var fetcher = state.fetchers.get(rf.key);\n                var revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n                state.fetchers.set(rf.key, revalidatingFetcher);\n              });\n              if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n                // This is cast to `any` currently because `RouteData`uses any and it\n                // would be a breaking change to use any.\n                // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n                actionData = _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data);\n              } else if (state.actionData) {\n                if (Object.keys(state.actionData).length === 0) {\n                  actionData = null;\n                } else {\n                  actionData = state.actionData;\n                }\n              }\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData !== undefined ? {\n                actionData: actionData\n              } : {}, revalidatingFetchers.length > 0 ? {\n                fetchers: new Map(state.fetchers)\n              } : {}), {\n                flushSync: flushSync\n              });\n            }\n            revalidatingFetchers.forEach(function (rf) {\n              if (fetchControllers.has(rf.key)) {\n                abortFetcher(rf.key);\n              }\n              if (rf.controller) {\n                // Fetchers use an independent AbortController so that aborting a fetcher\n                // (via deleteFetcher) does not abort the triggering navigation that\n                // triggered the revalidation\n                fetchControllers.set(rf.key, rf.controller);\n              }\n            });\n            // Proxy navigation abort through to revalidation fetchers\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (f) {\n                return abortFetcher(f.key);\n              });\n            };\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            _context5.next = 16;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 16:\n            _yield$callLoadersAnd = _context5.sent;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 21;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 21:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.delete(rf.key);\n            });\n            // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect([].concat(_toConsumableArray(loaderResults), _toConsumableArray(fetcherResults)));\n            if (!redirect) {\n              _context5.next = 29;\n              break;\n            }\n            if (redirect.idx >= matchesToLoad.length) {\n              // If this redirect came from a fetcher make sure we mark it in\n              // fetchRedirectIds so it doesn't get revalidated on the next set of\n              // loader executions\n              fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n              fetchRedirectIds.add(fetcherKey);\n            }\n            _context5.next = 28;\n            return startRedirectNavigation(request, redirect.result, {\n              replace: replace\n            });\n          case 28:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 29:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            // During partial hydration, preserve SSR errors for routes that don't re-run\n            if (future.v7_partialHydration && initialHydration && state.errors) {\n              Object.entries(state.errors).filter(function (_ref2) {\n                var _ref11 = _slicedToArray(_ref2, 1),\n                  id = _ref11[0];\n                return !matchesToLoad.some(function (m) {\n                  return m.route.id === id;\n                });\n              }).forEach(function (_ref3) {\n                var _ref12 = _slicedToArray(_ref3, 2),\n                  routeId = _ref12[0],\n                  error = _ref12[1];\n                errors = Object.assign(errors || {}, _defineProperty({}, routeId, error));\n              });\n            }\n            updatedFetchers = markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n            return _context5.abrupt(\"return\", _extends({\n              loaderData: loaderData,\n              errors: errors\n            }, shouldUpdateFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 36:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var flushSync = (opts && opts.unstable_flushSync) === true;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission,\n      error = _normalizeNavigateOpt.error;\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x22, _x23, _x24, _x25, _x26, _x27, _x28) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, flushSync, submission) {\n      var _error2, existingFetcher, abortController, fetchRequest, originatingLoadId, actionResults, actionResult, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData2, loaderData, errors, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (!(!match.route.action && !match.route.lazy)) {\n              _context6.next = 6;\n              break;\n            }\n            _error2 = getInternalRouterError(405, {\n              method: submission.formMethod,\n              pathname: path,\n              routeId: routeId\n            });\n            setFetcherError(key, routeId, _error2, {\n              flushSync: flushSync\n            });\n            return _context6.abrupt(\"return\");\n          case 6:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n              flushSync: flushSync\n            });\n            // Call the action for the fetcher\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            fetchControllers.set(key, abortController);\n            originatingLoadId = incrementingLoadId;\n            _context6.next = 14;\n            return callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n          case 14:\n            actionResults = _context6.sent;\n            actionResult = actionResults[0];\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 19;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 19:\n            if (!(future.v7_fetcherPersist && deletedFetchers.has(key))) {\n              _context6.next = 25;\n              break;\n            }\n            if (!(isRedirectResult(actionResult) || isErrorResult(actionResult))) {\n              _context6.next = 23;\n              break;\n            }\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context6.abrupt(\"return\");\n          case 23:\n            _context6.next = 38;\n            break;\n          case 25:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 35;\n              break;\n            }\n            fetchControllers.delete(key);\n            if (!(pendingNavigationLoadId > originatingLoadId)) {\n              _context6.next = 32;\n              break;\n            }\n            // A new navigation was kicked off after our action started, so that\n            // should take precedence over this redirect navigation.  We already\n            // set isRevalidationRequired so all loaders for the new route should\n            // fire unless opted out via shouldRevalidate\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context6.abrupt(\"return\");\n          case 32:\n            fetchRedirectIds.add(key);\n            updateFetcherState(key, getLoadingFetcher(submission));\n            return _context6.abrupt(\"return\", startRedirectNavigation(fetchRequest, actionResult, {\n              fetcherSubmission: submission\n            }));\n          case 35:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 38;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 38:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 40;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 40:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = getLoadingFetcher(submission, actionResult.data);\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.unstable_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (rf) {\n              return rf.key !== key;\n            }).forEach(function (rf) {\n              var staleKey = rf.key;\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              if (fetchControllers.has(staleKey)) {\n                abortFetcher(staleKey);\n              }\n              if (rf.controller) {\n                fetchControllers.set(staleKey, rf.controller);\n              }\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (rf) {\n                return abortFetcher(rf.key);\n              });\n            };\n            abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            _context6.next = 56;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 56:\n            _yield$callLoadersAnd2 = _context6.sent;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 61;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 61:\n            abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (r) {\n              return fetchControllers.delete(r.key);\n            });\n            redirect = findRedirect([].concat(_toConsumableArray(loaderResults), _toConsumableArray(fetcherResults)));\n            if (!redirect) {\n              _context6.next = 69;\n              break;\n            }\n            if (redirect.idx >= matchesToLoad.length) {\n              // If this redirect came from a fetcher make sure we mark it in\n              // fetchRedirectIds so it doesn't get revalidated on the next set of\n              // loader executions\n              fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n              fetchRedirectIds.add(fetcherKey);\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(revalidationRequest, redirect.result));\n          case 69:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n            // deleted, only put it back to idle if it hasn't been deleted\n            if (state.fetchers.has(key)) {\n              doneFetcher = getDoneFetcher(actionResult.data);\n              state.fetchers.set(key, doneFetcher);\n            }\n            abortStaleFetchLoads(loadId);\n            // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n                fetchers: new Map(state.fetchers)\n              });\n              isRevalidationRequired = false;\n            }\n          case 73:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x29, _x30, _x31, _x32, _x33, _x34, _x35) {\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, flushSync, submission) {\n      var existingFetcher, abortController, fetchRequest, originatingLoadId, results, result;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key);\n            updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n              flushSync: flushSync\n            });\n            // Call the loader for this fetcher route match\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            fetchControllers.set(key, abortController);\n            originatingLoadId = incrementingLoadId;\n            _context7.next = 8;\n            return callDataStrategy(\"loader\", fetchRequest, [match], matches);\n          case 8:\n            results = _context7.sent;\n            result = results[0]; // Deferred isn't supported for fetcher loads, await everything and treat it\n            // as a normal load.  resolveDeferredData will return undefined if this\n            // fetcher gets aborted, so we just leave result untouched and short circuit\n            // below if that happens\n            if (!isDeferredResult(result)) {\n              _context7.next = 17;\n              break;\n            }\n            _context7.next = 13;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 13:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 16;\n              break;\n            }\n            _context7.t0 = result;\n          case 16:\n            result = _context7.t0;\n          case 17:\n            // We can delete this so long as we weren't aborted by our our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 20;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 20:\n            if (!deletedFetchers.has(key)) {\n              _context7.next = 23;\n              break;\n            }\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context7.abrupt(\"return\");\n          case 23:\n            if (!isRedirectResult(result)) {\n              _context7.next = 33;\n              break;\n            }\n            if (!(pendingNavigationLoadId > originatingLoadId)) {\n              _context7.next = 29;\n              break;\n            }\n            // A new navigation was kicked off after our loader started, so that\n            // should take precedence over this redirect navigation\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context7.abrupt(\"return\");\n          case 29:\n            fetchRedirectIds.add(key);\n            _context7.next = 32;\n            return startRedirectNavigation(fetchRequest, result);\n          case 32:\n            return _context7.abrupt(\"return\");\n          case 33:\n            if (!isErrorResult(result)) {\n              _context7.next = 36;\n              break;\n            }\n            setFetcherError(key, routeId, result.error);\n            return _context7.abrupt(\"return\");\n          case 36:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n            // Put the fetcher back into an idle state\n            updateFetcherState(key, getDoneFetcher(result.data));\n          case 38:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x36, _x37, _x38) {\n    return _startRedirectNavigation.apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(request, redirect, _temp2) {\n      var _ref13, submission, fetcherSubmission, replace, location, redirectLocation, isDocumentReload, url, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, activeSubmission, overrideNavigation;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref13 = _temp2 === void 0 ? {} : _temp2, submission = _ref13.submission, fetcherSubmission = _ref13.fetcherSubmission, replace = _ref13.replace;\n            if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n              isRevalidationRequired = true;\n            }\n            location = redirect.response.headers.get(\"Location\");\n            invariant(location, \"Expected a Location header on the redirect Response\");\n            location = normalizeRedirectLocation(location, new URL(request.url), basename);\n            redirectLocation = createLocation(state.location, location, {\n              _isRedirect: true\n            });\n            if (!isBrowser) {\n              _context8.next = 12;\n              break;\n            }\n            isDocumentReload = false;\n            if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n              // Hard reload if the response contained X-Remix-Reload-Document\n              isDocumentReload = true;\n            } else if (ABSOLUTE_URL_REGEX.test(location)) {\n              url = init.history.createURL(location);\n              isDocumentReload =\n              // Hard reload if it's an absolute URL to a new origin\n              url.origin !== routerWindow.location.origin ||\n              // Hard reload if it's an absolute URL that does not match our basename\n              stripBasename(url.pathname, basename) == null;\n            }\n            if (!isDocumentReload) {\n              _context8.next = 12;\n              break;\n            }\n            if (replace) {\n              routerWindow.location.replace(location);\n            } else {\n              routerWindow.location.assign(location);\n            }\n            return _context8.abrupt(\"return\");\n          case 12:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType;\n            if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n              submission = getSubmissionFromNavigation(state.navigation);\n            }\n            // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            activeSubmission = submission || fetcherSubmission;\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))) {\n              _context8.next = 22;\n              break;\n            }\n            _context8.next = 20;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, activeSubmission, {\n                formAction: location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 20:\n            _context8.next = 25;\n            break;\n          case 22:\n            // If we have a navigation submission, we will preserve it through the\n            // redirect navigation\n            overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n            _context8.next = 25;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: overrideNavigation,\n              // Send fetcher submissions through for shouldRevalidate\n              fetcherSubmission: fetcherSubmission,\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 25:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callDataStrategy(_x39, _x40, _x41, _x42) {\n    return _callDataStrategy.apply(this, arguments);\n  }\n  function _callDataStrategy() {\n    _callDataStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(type, request, matchesToLoad, matches) {\n      var results;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n          case 3:\n            results = _context9.sent;\n            _context9.next = 6;\n            return Promise.all(results.map(function (result, i) {\n              if (isRedirectHandlerResult(result)) {\n                var response = result.result;\n                return {\n                  type: ResultType.redirect,\n                  response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n                };\n              }\n              return convertHandlerResultToDataResult(result);\n            }));\n          case 6:\n            return _context9.abrupt(\"return\", _context9.sent);\n          case 9:\n            _context9.prev = 9;\n            _context9.t0 = _context9[\"catch\"](0);\n            return _context9.abrupt(\"return\", matchesToLoad.map(function () {\n              return {\n                type: ResultType.error,\n                error: _context9.t0\n              };\n            }));\n          case 12:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9, null, [[0, 9]]);\n    }));\n    return _callDataStrategy.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x43, _x44, _x45, _x46, _x47) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var _yield$Promise$all, _yield$Promise$all2, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : []].concat(_toConsumableArray(fetchersToLoad.map(function (f) {\n              if (f.matches && f.match && f.controller) {\n                var fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n                return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(function (r) {\n                  return r[0];\n                });\n              } else {\n                return Promise.resolve({\n                  type: ResultType.error,\n                  error: getInternalRouterError(404, {\n                    pathname: f.path\n                  })\n                });\n              }\n            }))));\n          case 2:\n            _yield$Promise$all = _context10.sent;\n            _yield$Promise$all2 = _toArray(_yield$Promise$all);\n            loaderResults = _yield$Promise$all2[0];\n            fetcherResults = _yield$Promise$all2.slice(1);\n            _context10.next = 8;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n              return request.signal;\n            }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n              return f.match;\n            }), fetcherResults, fetchersToLoad.map(function (f) {\n              return f.controller ? f.controller.signal : null;\n            }), true)]);\n          case 8:\n            return _context10.abrupt(\"return\", {\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 9:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds()));\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      var count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = getDoneFetcher(fetcher.data);\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          id = _step4$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    var blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers: blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    var currentLocation = _ref4.currentLocation,\n      nextLocation = _ref4.nextLocation,\n      historyAction = _ref4.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      var key = getScrollRestorationKey(location, matches.map(function (m) {\n        return convertRouteMatchToUiMatch(m, state.loaderData);\n      }));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      var key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      var key = getScrollKey(location, matches);\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  var future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  function query(_x48, _x49) {\n    return _query.apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(request, _temp3) {\n      var _ref14, requestContext, skipLoaderErrorBubbling, unstable_dataStrategy, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error3, _getShortCircuitMatch4, notFoundMatches, _route2, result;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) switch (_context11.prev = _context11.next) {\n          case 0:\n            _ref14 = _temp3 === void 0 ? {} : _temp3, requestContext = _ref14.requestContext, skipLoaderErrorBubbling = _ref14.skipLoaderErrorBubbling, unstable_dataStrategy = _ref14.unstable_dataStrategy;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n              _context11.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context11.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context11.next = 15;\n              break;\n            }\n            _error3 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route2 = _getShortCircuitMatch4.route;\n            return _context11.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route2.id, _error3),\n              statusCode: _error3.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context11.next = 17;\n            return queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n          case 17:\n            result = _context11.sent;\n            if (!isResponse(result)) {\n              _context11.next = 20;\n              break;\n            }\n            return _context11.abrupt(\"return\", result);\n          case 20:\n            return _context11.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context11.stop();\n        }\n      }, _callee11);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x50, _x51) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, _temp4) {\n      var _ref15, routeId, requestContext, unstable_dataStrategy, url, method, location, matches, match, result, error, _result$activeDeferre, data;\n      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            _ref15 = _temp4 === void 0 ? {} : _temp4, routeId = _ref15.routeId, requestContext = _ref15.requestContext, unstable_dataStrategy = _ref15.unstable_dataStrategy;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n              _context12.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context12.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context12.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context12.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context12.next = 20;\n            return queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n          case 20:\n            result = _context12.sent;\n            if (!isResponse(result)) {\n              _context12.next = 23;\n              break;\n            }\n            return _context12.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context12.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context12.next = 28;\n              break;\n            }\n            return _context12.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context12.next = 32;\n              break;\n            }\n            data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context12.abrupt(\"return\", data);\n          case 32:\n            return _context12.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee12);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x52, _x53, _x54, _x55, _x56, _x57, _x58) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context13.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context13.next = 7;\n              break;\n            }\n            _context13.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n          case 5:\n            _result = _context13.sent;\n            return _context13.abrupt(\"return\", _result);\n          case 7:\n            _context13.next = 9;\n            return loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n          case 9:\n            result = _context13.sent;\n            return _context13.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context13.prev = 13;\n            _context13.t0 = _context13[\"catch\"](1);\n            if (!(isHandlerResult(_context13.t0) && isResponse(_context13.t0.result))) {\n              _context13.next = 19;\n              break;\n            }\n            if (!(_context13.t0.type === ResultType.error)) {\n              _context13.next = 18;\n              break;\n            }\n            throw _context13.t0.result;\n          case 18:\n            return _context13.abrupt(\"return\", _context13.t0.result);\n          case 19:\n            if (!isRedirectResponse(_context13.t0)) {\n              _context13.next = 21;\n              break;\n            }\n            return _context13.abrupt(\"return\", _context13.t0);\n          case 21:\n            throw _context13.t0;\n          case 22:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee13, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x59, _x60, _x61, _x62, _x63, _x64, _x65) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n      var result, error, results, _error4, loaderRequest, boundaryMatch, _context14, context;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context15.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context15.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context15.next = 12;\n            break;\n          case 7:\n            _context15.next = 9;\n            return callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n          case 9:\n            results = _context15.sent;\n            result = results[0];\n            if (request.signal.aborted) {\n              throwStaticHandlerAbortedError(request, isRouteRequest, future);\n            }\n          case 12:\n            if (!isRedirectResult(result)) {\n              _context15.next = 14;\n              break;\n            }\n            throw new Response(null, {\n              status: result.response.status,\n              headers: {\n                Location: result.response.headers.get(\"Location\")\n              }\n            });\n          case 14:\n            if (!isDeferredResult(result)) {\n              _context15.next = 19;\n              break;\n            }\n            _error4 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context15.next = 18;\n              break;\n            }\n            throw _error4;\n          case 18:\n            result = {\n              type: ResultType.error,\n              error: _error4\n            };\n          case 19:\n            if (!isRouteRequest) {\n              _context15.next = 23;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context15.next = 22;\n              break;\n            }\n            throw result.error;\n          case 22:\n            return _context15.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 23:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            if (!isErrorResult(result)) {\n              _context15.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n            _context15.next = 28;\n            return loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n          case 28:\n            _context14 = _context15.sent;\n            return _context15.abrupt(\"return\", _extends({}, _context14, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            _context15.next = 32;\n            return loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n          case 32:\n            context = _context15.sent;\n            return _context15.abrupt(\"return\", _extends({}, context, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data)\n            }, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionHeaders: result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {}\n            }));\n          case 34:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x66, _x67, _x68, _x69, _x70, _x71, _x72) {\n    return _loadRouteData.apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n        while (1) switch (_context16.prev = _context16.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n              _context16.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader || m.route.lazy;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context16.next = 7;\n              break;\n            }\n            return _context16.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context16.next = 9;\n            return callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n          case 9:\n            results = _context16.sent;\n            if (request.signal.aborted) {\n              throwStaticHandlerAbortedError(request, isRouteRequest, future);\n            }\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context16.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 16:\n          case \"end\":\n            return _context16.stop();\n        }\n      }, _callee15);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  function callDataStrategy(_x73, _x74, _x75, _x76, _x77, _x78, _x79) {\n    return _callDataStrategy2.apply(this, arguments);\n  }\n  function _callDataStrategy2() {\n    _callDataStrategy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n      var results;\n      return _regeneratorRuntime().wrap(function _callee16$(_context17) {\n        while (1) switch (_context17.prev = _context17.next) {\n          case 0:\n            _context17.next = 2;\n            return callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n          case 2:\n            results = _context17.sent;\n            _context17.next = 5;\n            return Promise.all(results.map(function (result, i) {\n              if (isRedirectHandlerResult(result)) {\n                var response = result.result;\n                // Throw redirects and let the server handle them with an HTTP redirect\n                throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n              }\n              if (isResponse(result.result) && isRouteRequest) {\n                // For SSR single-route requests, we want to hand Responses back\n                // directly without unwrapping\n                throw result;\n              }\n              return convertHandlerResultToDataResult(result);\n            }));\n          case 5:\n            return _context17.abrupt(\"return\", _context17.sent);\n          case 6:\n          case \"end\":\n            return _context17.stop();\n        }\n      }, _callee16);\n    }));\n    return _callDataStrategy2.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  var method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    var _iterator5 = _createForOfIteratorHelper(matches),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var match = _step5.value;\n        contextualMatches.push(match);\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  var path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  var getInvalidBodyError = function getInvalidBodyError() {\n    return {\n      path: path,\n      error: getInternalRouterError(400, {\n        type: \"invalid-body\"\n      })\n    };\n  };\n  // Create a Submission on non-GET navigations\n  var rawFormMethod = opts.formMethod || \"get\";\n  var formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  var formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      var text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce(function (acc, _ref5) {\n        var _ref19 = _slicedToArray(_ref5, 2),\n          name = _ref19[0],\n          value = _ref19[1];\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path: path,\n        submission: {\n          formMethod: formMethod,\n          formAction: formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text: text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        var _json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path: path,\n          submission: {\n            formMethod: formMethod,\n            formAction: formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json: _json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  var searchParams;\n  var formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  var submission = {\n    formMethod: formMethod,\n    formAction: formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData: formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path: path,\n      submission: submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  var parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  var actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  var boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  var boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  var actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  var shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    var route = match.route;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(function (m) {\n      return m.route.id === f.routeId;\n    }) || deletedFetchers.has(key)) {\n      return;\n    }\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    var fetcher = state.fetchers.get(key);\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    var shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  var isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nfunction loadLazyRouteModule(_x80, _x81, _x82) {\n  return _loadLazyRouteModule.apply(this, arguments);\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime().wrap(function _callee17$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          if (route.lazy) {\n            _context18.next = 2;\n            break;\n          }\n          return _context18.abrupt(\"return\");\n        case 2:\n          _context18.next = 4;\n          return route.lazy();\n        case 4:\n          lazyRoute = _context18.sent;\n          if (route.lazy) {\n            _context18.next = 7;\n            break;\n          }\n          return _context18.abrupt(\"return\");\n        case 7:\n          routeToUpdate = manifest[route.id];\n          invariant(routeToUpdate, \"No route found in manifest\");\n          // Update the route in place.  This should be safe because there's no way\n          // we could yet be sitting on this route as we can't get there without\n          // resolving lazy() first.\n          //\n          // This is different than the HMR \"update\" use-case where we may actively be\n          // on the route being updated.  The main concern boils down to \"does this\n          // mutation affect any ongoing navigations or any current state.matches\n          // values?\".  If not, it should be safe to update in place.\n          routeUpdates = {};\n          for (lazyRouteProperty in lazyRoute) {\n            staticRouteValue = routeToUpdate[lazyRouteProperty];\n            isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n            // This property isn't static since it should always be updated based\n            // on the route updates\n            lazyRouteProperty !== \"hasErrorBoundary\";\n            warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n            if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n              routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n            }\n          }\n          // Mutate the route with the provided updates.  Do this first so we pass\n          // the updated version to mapRouteProperties\n          Object.assign(routeToUpdate, routeUpdates);\n          // Mutate the `hasErrorBoundary` property on the route based on the route\n          // updates and remove the `lazy` function so we don't resolve the lazy\n          // route again.\n          Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n            lazy: undefined\n          }));\n        case 13:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee17);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(function (m) {\n    return m.resolve();\n  }));\n}\nfunction callDataStrategyImpl(_x83, _x84, _x85, _x86, _x87, _x88, _x89, _x90) {\n  return _callDataStrategyImpl.apply(this, arguments);\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\nfunction _callDataStrategyImpl() {\n  _callDataStrategyImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n    var routeIdsToLoad, loadedMatches, results;\n    return _regeneratorRuntime().wrap(function _callee18$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          routeIdsToLoad = matchesToLoad.reduce(function (acc, m) {\n            return acc.add(m.route.id);\n          }, new Set());\n          loadedMatches = new Set(); // Send all matches here to allow for a middleware-type implementation.\n          // handler will be a no-op for unneeded routes and we filter those results\n          // back out below.\n          _context19.next = 4;\n          return dataStrategyImpl({\n            matches: matches.map(function (match) {\n              var shouldLoad = routeIdsToLoad.has(match.route.id);\n              // `resolve` encapsulates the route.lazy, executing the\n              // loader/action, and mapping return values/thrown errors to a\n              // HandlerResult.  Users can pass a callback to take fine-grained control\n              // over the execution of the loader/action\n              var resolve = function resolve(handlerOverride) {\n                loadedMatches.add(match.route.id);\n                return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n                  type: ResultType.data,\n                  result: undefined\n                });\n              };\n              return _extends({}, match, {\n                shouldLoad: shouldLoad,\n                resolve: resolve\n              });\n            }),\n            request: request,\n            params: matches[0].params,\n            context: requestContext\n          });\n        case 4:\n          results = _context19.sent;\n          // Throw if any loadRoute implementations not called since they are what\n          // ensures a route is fully loaded\n          matches.forEach(function (m) {\n            return invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\");\n          });\n          // Filter out any middleware-only matches for which we didn't need to run handlers\n          return _context19.abrupt(\"return\", results.filter(function (_, i) {\n            return routeIdsToLoad.has(matches[i].route.id);\n          }));\n        case 7:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee18);\n  }));\n  return _callDataStrategyImpl.apply(this, arguments);\n}\nfunction callLoaderOrAction(_x91, _x92, _x93, _x94, _x95, _x96, _x97) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n    var result, onReject, runHandler, handler, handlerError, _yield$Promise$all3, _yield$Promise$all4, value, url, pathname, _url, _pathname;\n    return _regeneratorRuntime().wrap(function _callee20$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          runHandler = function runHandler(handler) {\n            // Setup a promise we can race against so that abort signals short circuit\n            var reject;\n            // This will never resolve so safe to type it as Promise<HandlerResult> to\n            // satisfy the function return value\n            var abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n            onReject = function onReject() {\n              return reject();\n            };\n            request.signal.addEventListener(\"abort\", onReject);\n            var actualHandler = function actualHandler(ctx) {\n              if (typeof handler !== \"function\") {\n                return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n              }\n              return handler.apply(void 0, [{\n                request: request,\n                params: match.params,\n                context: staticContext\n              }].concat(_toConsumableArray(ctx !== undefined ? [ctx] : [])));\n            };\n            var handlerPromise;\n            if (handlerOverride) {\n              handlerPromise = handlerOverride(function (ctx) {\n                return actualHandler(ctx);\n              });\n            } else {\n              handlerPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n                var val;\n                return _regeneratorRuntime().wrap(function _callee19$(_context20) {\n                  while (1) switch (_context20.prev = _context20.next) {\n                    case 0:\n                      _context20.prev = 0;\n                      _context20.next = 3;\n                      return actualHandler();\n                    case 3:\n                      val = _context20.sent;\n                      return _context20.abrupt(\"return\", {\n                        type: \"data\",\n                        result: val\n                      });\n                    case 7:\n                      _context20.prev = 7;\n                      _context20.t0 = _context20[\"catch\"](0);\n                      return _context20.abrupt(\"return\", {\n                        type: \"error\",\n                        result: _context20.t0\n                      });\n                    case 10:\n                    case \"end\":\n                      return _context20.stop();\n                  }\n                }, _callee19, null, [[0, 7]]);\n              }))();\n            }\n            return Promise.race([handlerPromise, abortPromise]);\n          };\n          _context21.prev = 1;\n          handler = match.route[type];\n          if (!match.route.lazy) {\n            _context21.next = 33;\n            break;\n          }\n          if (!handler) {\n            _context21.next = 15;\n            break;\n          }\n          _context21.next = 7;\n          return Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch(function (e) {\n            handlerError = e;\n          }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        case 7:\n          _yield$Promise$all3 = _context21.sent;\n          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 1);\n          value = _yield$Promise$all4[0];\n          if (!(handlerError !== undefined)) {\n            _context21.next = 12;\n            break;\n          }\n          throw handlerError;\n        case 12:\n          result = value;\n          _context21.next = 31;\n          break;\n        case 15:\n          _context21.next = 17;\n          return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        case 17:\n          handler = match.route[type];\n          if (!handler) {\n            _context21.next = 24;\n            break;\n          }\n          _context21.next = 21;\n          return runHandler(handler);\n        case 21:\n          result = _context21.sent;\n          _context21.next = 31;\n          break;\n        case 24:\n          if (!(type === \"action\")) {\n            _context21.next = 30;\n            break;\n          }\n          url = new URL(request.url);\n          pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: pathname,\n            routeId: match.route.id\n          });\n        case 30:\n          return _context21.abrupt(\"return\", {\n            type: ResultType.data,\n            result: undefined\n          });\n        case 31:\n          _context21.next = 42;\n          break;\n        case 33:\n          if (handler) {\n            _context21.next = 39;\n            break;\n          }\n          _url = new URL(request.url);\n          _pathname = _url.pathname + _url.search;\n          throw getInternalRouterError(404, {\n            pathname: _pathname\n          });\n        case 39:\n          _context21.next = 41;\n          return runHandler(handler);\n        case 41:\n          result = _context21.sent;\n        case 42:\n          invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context21.next = 48;\n          break;\n        case 45:\n          _context21.prev = 45;\n          _context21.t0 = _context21[\"catch\"](1);\n          return _context21.abrupt(\"return\", {\n            type: ResultType.error,\n            result: _context21.t0\n          });\n        case 48:\n          _context21.prev = 48;\n          if (onReject) {\n            request.signal.removeEventListener(\"abort\", onReject);\n          }\n          return _context21.finish(48);\n        case 51:\n          return _context21.abrupt(\"return\", result);\n        case 52:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee20, null, [[1, 45, 48, 51]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction convertHandlerResultToDataResult(_x98) {\n  return _convertHandlerResultToDataResult.apply(this, arguments);\n} // Support relative routing in internal redirects\nfunction _convertHandlerResultToDataResult() {\n  _convertHandlerResultToDataResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(handlerResult) {\n    var result, type, status, data, contentType, _result$init, _result$init2;\n    return _regeneratorRuntime().wrap(function _callee21$(_context22) {\n      while (1) switch (_context22.prev = _context22.next) {\n        case 0:\n          result = handlerResult.result, type = handlerResult.type, status = handlerResult.status;\n          if (!isResponse(result)) {\n            _context22.next = 25;\n            break;\n          }\n          _context22.prev = 2;\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context22.next = 14;\n            break;\n          }\n          if (!(result.body == null)) {\n            _context22.next = 9;\n            break;\n          }\n          data = null;\n          _context22.next = 12;\n          break;\n        case 9:\n          _context22.next = 11;\n          return result.json();\n        case 11:\n          data = _context22.sent;\n        case 12:\n          _context22.next = 17;\n          break;\n        case 14:\n          _context22.next = 16;\n          return result.text();\n        case 16:\n          data = _context22.sent;\n        case 17:\n          _context22.next = 22;\n          break;\n        case 19:\n          _context22.prev = 19;\n          _context22.t0 = _context22[\"catch\"](2);\n          return _context22.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context22.t0\n          });\n        case 22:\n          if (!(type === ResultType.error)) {\n            _context22.next = 24;\n            break;\n          }\n          return _context22.abrupt(\"return\", {\n            type: ResultType.error,\n            error: new ErrorResponseImpl(result.status, result.statusText, data),\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 24:\n          return _context22.abrupt(\"return\", {\n            type: ResultType.data,\n            data: data,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 25:\n          if (!(type === ResultType.error)) {\n            _context22.next = 27;\n            break;\n          }\n          return _context22.abrupt(\"return\", {\n            type: ResultType.error,\n            error: result,\n            statusCode: isRouteErrorResponse(result) ? result.status : status\n          });\n        case 27:\n          if (!isDeferredData(result)) {\n            _context22.next = 29;\n            break;\n          }\n          return _context22.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result,\n            statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n            headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n          });\n        case 29:\n          return _context22.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result,\n            statusCode: status\n          });\n        case 30:\n        case \"end\":\n          return _context22.stop();\n      }\n    }, _callee21, null, [[2, 19]]);\n  }));\n  return _convertHandlerResultToDataResult.apply(this, arguments);\n}\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  var location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    var trimmedMatches = matches.slice(0, matches.findIndex(function (m) {\n      return m.route.id === routeId;\n    }) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    var normalizedLocation = location;\n    var url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    var isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, typeof value === \"string\" ? value : value.name);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  var formData = new FormData();\n  var _iterator7 = _createForOfIteratorHelper(searchParams.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        key = _step7$value[0],\n        value = _step7$value[1];\n      formData.append(key, value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {};\n  var pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      var error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        var boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = _defineProperty({}, pendingActionResult[0], pendingError);\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n    ),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors;\n  // Process results from our revalidating fetchers\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match,\n      controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator8 = _createForOfIteratorHelper(matches),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data)\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.length === 1 ? routes[0] : routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  var _ref20 = _temp5 === void 0 ? {} : _temp5,\n    pathname = _ref20.pathname,\n    routeId = _ref20.routeId,\n    method = _ref20.method,\n    type = _ref20.type;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result: result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveDeferredResults(_x99, _x100, _x101, _x102, _x103, _x104) {\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction _resolveDeferredResults() {\n  _resolveDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop, index, _ret;\n    return _regeneratorRuntime().wrap(function _callee22$(_context24) {\n      while (1) switch (_context24.prev = _context24.next) {\n        case 0:\n          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(index) {\n            var result, match, currentMatch, isRevalidatingLoader, signal;\n            return _regeneratorRuntime().wrap(function _loop$(_context23) {\n              while (1) switch (_context23.prev = _context23.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                  // anything with.  This is for revalidating fetchers where the route was\n                  // removed during HMR\n                  if (match) {\n                    _context23.next = 4;\n                    break;\n                  }\n                  return _context23.abrupt(\"return\", \"continue\");\n                case 4:\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context23.next = 11;\n                    break;\n                  }\n                  // Note: we do not have to touch activeDeferreds here since we race them\n                  // against the signal in resolveDeferredData and they'll get aborted\n                  // there if needed\n                  signal = signals[index];\n                  invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                  _context23.next = 11;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 11:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }, _loop);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context24.next = 10;\n            break;\n          }\n          return _context24.delegateYield(_loop(index), \"t0\", 4);\n        case 4:\n          _ret = _context24.t0;\n          if (!(_ret === \"continue\")) {\n            _context24.next = 7;\n            break;\n          }\n          return _context24.abrupt(\"continue\", 7);\n        case 7:\n          index++;\n          _context24.next = 2;\n          break;\n        case 10:\n        case \"end\":\n          return _context24.stop();\n      }\n    }, _callee22);\n  }));\n  return _resolveDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x105, _x106, _x107) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee23$(_context25) {\n      while (1) switch (_context25.prev = _context25.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context25.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context25.sent;\n          if (!aborted) {\n            _context25.next = 6;\n            break;\n          }\n          return _context25.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context25.next = 14;\n            break;\n          }\n          _context25.prev = 7;\n          return _context25.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context25.prev = 11;\n          _context25.t0 = _context25[\"catch\"](7);\n          return _context25.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context25.t0\n          });\n        case 14:\n          return _context25.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context25.stop();\n      }\n    }, _callee23, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  var formMethod = navigation.formMethod,\n    formAction = navigation.formAction,\n    formEncType = navigation.formEncType,\n    text = navigation.text,\n    formData = navigation.formData,\n    json = navigation.json;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: undefined,\n      text: text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    var navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    var _navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return _navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  var navigation = {\n    state: \"submitting\",\n    location: location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    var fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data\n    };\n    return fetcher;\n  } else {\n    var _fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data: data\n    };\n    return _fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  var fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  var fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data: data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    var sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      var _json2 = JSON.parse(sessionPositions);\n      for (var _i = 0, _Object$entries = Object.entries(_json2 || {}); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    var _json3 = {};\n    var _iterator9 = _createForOfIteratorHelper(transitions),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _step9$value = _slicedToArray(_step9.value, 2),\n          k = _step9$value[0],\n          v = _step9$value[1];\n        _json3[k] = _toConsumableArray(v);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(_json3));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_window$location","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","_ref$pathname","_ref$search","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","concat","_toConsumableArray","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","score","computeScore","forEach","_route$path","includes","_iterator","_createForOfIteratorHelper","explodeOptionalSegments","_step","s","done","exploded","err","f","segments","split","_segments","_toArray","first","rest","isOptional","endsWith","required","restExploded","result","apply","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","_keyMatch","_slicedToArray","optional","param","pattern","_compilePath","compilePath","_compilePath2","matcher","compiledParams","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref6","toPathname","_ref6$search","_ref6$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","_Error","_inherits","_super","_createSuper","_classCallCheck","arguments","_createClass","_wrapNativeSuper","DeferredData","_this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","_ref7","_defineProperty","trackPromise","_this2","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","_this3","cancel","_this4","abort","k","_resolveData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this5","wrap","_callee$","_context","prev","next","resolve","sent","abrupt","stop","resolveData","_x","size","_ref3","_ref8","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unstable_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","_ref9","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","_x2","_x3","_navigate","_callee2","normalizedPath","_normalizeNavigateOpt2","submission","userReplace","_callee2$","_context2","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_x4","_x5","_x6","_startNavigation","_callee3","routesToUse","loadingNavigation","_getShortCircuitMatch2","notFoundMatches","_route","request","pendingActionResult","actionResult","_yield$handleLoaders","shortCircuited","_callee3$","_context3","saveScrollPosition","cancelActiveDeferreds","isHashChangeOnly","createClientSideRequest","findNearestBoundary","type","handleAction","getLoadingNavigation","handleLoaders","fetcherSubmission","getActionDataForCommit","_x7","_x8","_x9","_x10","_x11","_handleAction","_callee4","actionMatch","results","_location","boundaryMatch","_callee4$","_context4","getSubmittingNavigation","getTargetMatch","method","routeId","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","isErrorResult","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_x20","_x21","_handleLoaders","_callee5","activeSubmission","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_updatedFetchers","abortPendingFetchRevalidations","_yield$callLoadersAnd","loaderResults","fetcherResults","fetcherKey","_processLoaderData","updatedFetchers","didAbortFetchLoads","shouldUpdateFetchers","_callee5$","_context5","getSubmissionFromNavigation","getMatchesToLoad","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","_ref11","_ref12","abortStaleFetchLoads","fetch","setFetcherError","_normalizeNavigateOpt","handleFetcherAction","handleFetcherLoader","_x22","_x23","_x24","_x25","_x26","_x27","_x28","_handleFetcherAction","_callee6","requestMatches","_error2","existingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_callee6$","_context6","updateFetcherState","getSubmittingFetcher","getDoneFetcher","staleKey","_x29","_x30","_x31","_x32","_x33","_x34","_x35","_handleFetcherLoader","_callee7","_callee7$","_context7","resolveDeferredData","t0","_x36","_x37","_x38","_startRedirectNavigation","_callee8","_temp2","_ref13","redirectLocation","isDocumentReload","redirectHistoryAction","_state$navigation","_callee8$","_context8","_x39","_x40","_x41","_x42","_callDataStrategy","_callee9","_callee9$","_context9","callDataStrategyImpl","all","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","_x43","_x44","_x45","_x46","_x47","_callLoadersAndMaybeResolveData","_callee10","currentMatches","fetchersToLoad","_yield$Promise$all","_yield$Promise$all2","_callee10$","_context10","fetcherRequest","resolveDeferredResults","_cancelledDeferredRou","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","_iterator2","_step2","doneKeys","_iterator3","_step3","landedId","yeetedKeys","_iterator4","_step4","_step4$value","getBlocker","blocker","newBlocker","_ref4","_entries","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_x48","_x49","_query","_callee11","_temp3","_ref14","requestContext","skipLoaderErrorBubbling","_getShortCircuitMatch3","methodNotAllowedMatches","_error3","_getShortCircuitMatch4","_route2","_callee11$","_context11","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_x50","_x51","_queryRoute","_callee12","_temp4","_ref15","_result$activeDeferre","_callee12$","_context12","find","values","_x52","_x53","_x54","_x55","_x56","_x57","_x58","_queryImpl","_callee13","routeMatch","_result","_callee13$","_context13","submit","loadRouteData","isHandlerResult","isRedirectResponse","_x59","_x60","_x61","_x62","_x63","_x64","_x65","_submit","_callee14","isRouteRequest","_error4","loaderRequest","_context14","context","_callee14$","_context15","throwStaticHandlerAbortedError","Location","Request","_x66","_x67","_x68","_x69","_x70","_x71","_x72","_loadRouteData","_callee15","executedLoaders","_callee15$","_context16","getLoaderMatchesUntilBoundary","processRouteLoaderData","fromEntries","_x73","_x74","_x75","_x76","_x77","_x78","_x79","_callDataStrategy2","_callee16","_callee16$","_context17","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","_iterator5","_step5","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","_ref19","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","unstable_actionStatus","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","_x80","_x81","_x82","_loadLazyRouteModule","_callee17","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_callee17$","_context18","_x83","_x84","_x85","_x86","_x87","_x88","_x89","_x90","_callDataStrategyImpl","_callee18","routeIdsToLoad","loadedMatches","_callee18$","_context19","shouldLoad","handlerOverride","callLoaderOrAction","_x91","_x92","_x93","_x94","_x95","_x96","_x97","_callLoaderOrAction","_callee20","staticContext","onReject","runHandler","handler","handlerError","_yield$Promise$all3","_yield$Promise$all4","_url","_pathname","_callee20$","_context21","actualHandler","ctx","handlerPromise","_callee19","val","_callee19$","_context20","finish","_x98","_convertHandlerResultToDataResult","_callee21","handlerResult","contentType","_result$init","_result$init2","_callee21$","_context22","isDeferredData","deferred","trimmedMatches","normalizedLocation","protocol","isSameBasename","_iterator6","_step6","_step6$value","_iterator7","_step7","_step7$value","foundError","_processRouteLoaderDa","_revalidatingFetchers","newLoaderData","mergedLoaderData","_iterator8","_step8","hasOwnProperty","eligibleMatches","reverse","_temp5","_ref20","errorMessage","_x99","_x100","_x101","_x102","_x103","_x104","_resolveDeferredResults","_callee22","signals","_loop","_ret","_callee22$","_context24","isRevalidatingLoader","_loop$","_context23","delegateYield","_x105","_x106","_x107","_resolveDeferredData","_callee23","unwrap","_callee23$","_context25","unwrappedData","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","_i","_Object$entries","_Object$entries$_i","_iterator9","_step9","_step9$value","setItem"],"sources":["C:\\Users\\Abhishek kumar\\OneDrive\\Desktop\\Bloodbank Project\\client\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\Abhishek kumar\\OneDrive\\Desktop\\Bloodbank Project\\client\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\Abhishek kumar\\OneDrive\\Desktop\\Bloodbank Project\\client\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData\n  status?: number;\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  unstable_actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  unstable_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n\n      let actionData: Record<string, RouteData> | null | undefined;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data as any,\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData !== undefined ? { actionData } : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type, status } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result, statusCode: status };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}