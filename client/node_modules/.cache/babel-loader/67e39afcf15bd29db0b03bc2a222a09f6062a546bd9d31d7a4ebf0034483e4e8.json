{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport API from \"../../../services/API\";\nimport { toast } from \"react-toastify\";\nexport const userLogin = createAsyncThunk(\"auth/login\", async (_ref, _ref2) => {\n  let {\n    role,\n    email,\n    password\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n  try {\n    const {\n      data\n    } = await API.post(\"/auth/login\", {\n      role,\n      email,\n      password\n    });\n    //store token\n    if (data.success) {\n      alert(data.message);\n      localStorage.setItem(\"token\", data.token);\n      window.location.replace(\"/\");\n    }\n    return data;\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\n\n//register\nexport const userRegister = createAsyncThunk(\"auth/register\", async (_ref3, _ref4) => {\n  let {\n    name,\n    role,\n    email,\n    password,\n    phone,\n    organisationName,\n    address,\n    hospitalName,\n    website\n  } = _ref3;\n  let {\n    rejectWithValue\n  } = _ref4;\n  try {\n    const {\n      data\n    } = await API.post(\"/auth/register\", {\n      name,\n      role,\n      email,\n      password,\n      phone,\n      organisationName,\n      address,\n      hospitalName,\n      website\n    });\n    if (data !== null && data !== void 0 && data.success) {\n      alert(\"User Registerd Successfully\");\n      window.location.replace(\"/login\");\n      toast.success(\"User Registerd Successfully\");\n    }\n  } catch (error) {\n    console.log(error);\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\n\n//current user\nexport const getCurrentUser = createAsyncThunk(\"auth/getCurrentUser\", async _ref5 => {\n  let {\n    rejectWithValue\n  } = _ref5;\n  try {\n    const res = await API.get(\"/auth/current-user\");\n    if (res.data) {\n      return res === null || res === void 0 ? void 0 : res.data;\n    }\n  } catch (error) {\n    console.log(error);\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});","map":{"version":3,"names":["createAsyncThunk","API","toast","userLogin","_ref","_ref2","role","email","password","rejectWithValue","data","post","success","alert","message","localStorage","setItem","token","window","location","replace","error","response","userRegister","_ref3","_ref4","name","phone","organisationName","address","hospitalName","website","console","log","getCurrentUser","_ref5","res","get"],"sources":["C:/Users/Abhishek kumar/OneDrive/Desktop/Bloodbank Project/client/src/redux/features/auth/authActions.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport API from \"../../../services/API\";\nimport { toast } from \"react-toastify\";\n\nexport const userLogin = createAsyncThunk(\n  \"auth/login\",\n  async ({ role, email, password }, { rejectWithValue }) => {\n    try {\n      const { data } = await API.post(\"/auth/login\", { role, email, password });\n      //store token\n      if (data.success) {\n        alert(data.message);\n        localStorage.setItem(\"token\", data.token);\n        window.location.replace(\"/\");\n      }\n      return data;\n    } catch (error) {\n      if (error.response && error.response.data.message) {\n        return rejectWithValue(error.response.data.message);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n\n//register\nexport const userRegister = createAsyncThunk(\n  \"auth/register\",\n  async (\n    {\n      name,\n      role,\n      email,\n      password,\n      phone,\n      organisationName,\n      address,\n      hospitalName,\n      website,\n    },\n    { rejectWithValue }\n  ) => {\n    try {\n      const { data } = await API.post(\"/auth/register\", {\n        name,\n        role,\n        email,\n        password,\n        phone,\n        organisationName,\n        address,\n        hospitalName,\n        website,\n      });\n      if (data?.success) {\n        alert(\"User Registerd Successfully\");\n        window.location.replace(\"/login\");\n        toast.success(\"User Registerd Successfully\");\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response && error.response.data.message) {\n        return rejectWithValue(error.response.data.message);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n\n//current user\nexport const getCurrentUser = createAsyncThunk(\n  \"auth/getCurrentUser\",\n  async ({ rejectWithValue }) => {\n    try {\n      const res = await API.get(\"/auth/current-user\");\n      if (res.data) {\n        return res?.data;\n      }\n    } catch (error) {\n      console.log(error);\n      if (error.response && error.response.data.message) {\n        return rejectWithValue(error.response.data.message);\n      } else {\n        return rejectWithValue(error.message);\n      }\n    }\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}